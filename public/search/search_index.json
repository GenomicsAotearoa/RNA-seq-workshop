{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"1_background/","text":"\u00ab Back to homepage 1. Quality Assessment \u00bb Workshop Overview \u00b6 Do not remove this line (it will not be displayed) RNA-seq Workflow \u00b6 Before beginning an RNA-Seq experiment, you should understand and carefully consider each step of the RNA-Seq workflow: Experimental design, Extraction, Library preparation, Sequencing, and Data analysis. Experimental design \u00b6 The design stage of your experiment is arguably the most critical step in ensuring the success of an RNA-Seq experiment. Researchers must make key decisions at the start of any NGS project, including the type of assay and the number of samples to analyze. The optimal approach will depend largely on the objectives of the experiment, hypotheses to be tested, and expected information to be gathered. Extraction \u00b6 The first step in characterizing the transcriptome involves isolating and purifying cellular RNA. The quality and quantity of the input material have a significant impact on data quality; therefore, care must be taken when isolating and preparing RNA for sequencing. Given the chemical instability of RNA, there are two major reasons for RNA degradation during experiments: - RNA contains ribose sugar and is not stable in alkaline conditions because of the reactive hydroxyl bonds. RNA is also more prone to heat degradation than DNA. - Ribonucleases (RNases) are ubiquitous and very stable, so avoiding them is nearly impossible. It is essential to maintain an RNase-free environment by wearing sterile disposable gloves when handling reagents and RNA samples, employing RNase inhibitors, and using DEPC-treated water instead of PCR-grade water. Additionally, proper storage of RNA is crucial to avoid RNA degradation. In the short term, RNA may be stored in RNase-free water or TE buffer at -80\u00b0C for 1 year without degradation. For the long term, RNA samples may be stored as ethanol precipitates at -20\u00b0C. Avoid repeated freeze-thaw cycles of samples, which can lead to degradation. RNA of high integrity will maximize the likelihood of obtaining reliable and informative results. Library Preparation \u00b6 This involves generating a collection of RNA fragments that are compatible for sequencing. The process involves enrichment of target (non-ribosomal) RNA, fragmentation, reverse transcription (i.e. cDNA synthesis), and addition of sequencing adapters and amplification. The enrichment method determines which types of transcripts (e.g. mRNA, lncRNA, miRNA) will be included in the library. In addition, the cDNA synthesis step can be performed in a such a way as to maintain the original strand orientation of the transcript, generating what is known as \u2018strand-specific\u2019 or \u2018directional\u2019 libraries. Sequencing \u00b6 Parameters for sequencing\u2014such as read length, configuration, and output\u2014depend on the goals of your project and will influence your choice of instrument and sequencing chemistry. The main NGS technologies can be grouped into two categories: short-read (or \u2018second generation\u2019) sequencing, and long-read (or \u2018third generation\u2019) sequencing. Both have distinct benefits for RNA-Seq. - Short-read sequencing is relatively inexpensive on a per-base basis and can generate billions of reads in a massively parallel manner, with single-end read lengths ranging between 50 and 300 bp. The high-throughput nature of this technology is ideal for quantifying the relative abundance of transcripts or identifying rare transcripts. Several platforms available on the market offer flexible outputs using roughly similar chemistry. Each cDNA fragment can be sequenced from only one end, called single-end (SE) sequencing, or both ends, called paired-end (PE) sequencing. The former is generally less expensive and faster than the latter. However, paired-end sequencing helps detect genomic rearrangements and repetitive sequence alignments better than the single- end configuration, since more information is collected from each fragment. - Long-read sequencing can resolve inaccessible regions of the genome and read through the entire length of RNA transcripts, allowing precise determination of specific isoforms. Two of the leading long-read sequencing platform providers include Pacific Biosciences (PacBio), and Oxford Nanopore Technologies\u00ae. However, if cost reduction is paramount and/or high data output is required, short-read sequencing is a better choice. Data Analysis \u00b6 Evaluating your data quality and extracting biologically relevant information is the final and most rewarding step in an RNA-Seq experiment. It is important to discuss your project with an experienced bioinformatician to find the best analysis pipeline for your data. One pipeline does not fit all approaches. Exercises - Rank genes based on expression? - Identify differentially expressed genes after inducing a drug - Identify Novel transcripts - Identify bacterial and eukaryotic genes in a sample Yeast Dataset \u00b6 This workshop uses the dataset from yeast RNA-seq experiment, Lee et al 2008 Wild-type versus RNA degradation mutants Subset of data (chromosome 1) Six samples (3 WT / 3 MT) Single end sequencing Overview of Illumina Sequencing \u00b6 Here is a video to illumina sequencing. \u00ab Back to homepage 1. Quality Assessment \u00bb","title":"1 background"},{"location":"1_background/#workshop-overview","text":"Do not remove this line (it will not be displayed)","title":"Workshop Overview"},{"location":"1_background/#rna-seq-workflow","text":"Before beginning an RNA-Seq experiment, you should understand and carefully consider each step of the RNA-Seq workflow: Experimental design, Extraction, Library preparation, Sequencing, and Data analysis.","title":"RNA-seq Workflow"},{"location":"1_background/#experimental-design","text":"The design stage of your experiment is arguably the most critical step in ensuring the success of an RNA-Seq experiment. Researchers must make key decisions at the start of any NGS project, including the type of assay and the number of samples to analyze. The optimal approach will depend largely on the objectives of the experiment, hypotheses to be tested, and expected information to be gathered.","title":"Experimental design"},{"location":"1_background/#extraction","text":"The first step in characterizing the transcriptome involves isolating and purifying cellular RNA. The quality and quantity of the input material have a significant impact on data quality; therefore, care must be taken when isolating and preparing RNA for sequencing. Given the chemical instability of RNA, there are two major reasons for RNA degradation during experiments: - RNA contains ribose sugar and is not stable in alkaline conditions because of the reactive hydroxyl bonds. RNA is also more prone to heat degradation than DNA. - Ribonucleases (RNases) are ubiquitous and very stable, so avoiding them is nearly impossible. It is essential to maintain an RNase-free environment by wearing sterile disposable gloves when handling reagents and RNA samples, employing RNase inhibitors, and using DEPC-treated water instead of PCR-grade water. Additionally, proper storage of RNA is crucial to avoid RNA degradation. In the short term, RNA may be stored in RNase-free water or TE buffer at -80\u00b0C for 1 year without degradation. For the long term, RNA samples may be stored as ethanol precipitates at -20\u00b0C. Avoid repeated freeze-thaw cycles of samples, which can lead to degradation. RNA of high integrity will maximize the likelihood of obtaining reliable and informative results.","title":"Extraction"},{"location":"1_background/#library-preparation","text":"This involves generating a collection of RNA fragments that are compatible for sequencing. The process involves enrichment of target (non-ribosomal) RNA, fragmentation, reverse transcription (i.e. cDNA synthesis), and addition of sequencing adapters and amplification. The enrichment method determines which types of transcripts (e.g. mRNA, lncRNA, miRNA) will be included in the library. In addition, the cDNA synthesis step can be performed in a such a way as to maintain the original strand orientation of the transcript, generating what is known as \u2018strand-specific\u2019 or \u2018directional\u2019 libraries.","title":"Library Preparation"},{"location":"1_background/#sequencing","text":"Parameters for sequencing\u2014such as read length, configuration, and output\u2014depend on the goals of your project and will influence your choice of instrument and sequencing chemistry. The main NGS technologies can be grouped into two categories: short-read (or \u2018second generation\u2019) sequencing, and long-read (or \u2018third generation\u2019) sequencing. Both have distinct benefits for RNA-Seq. - Short-read sequencing is relatively inexpensive on a per-base basis and can generate billions of reads in a massively parallel manner, with single-end read lengths ranging between 50 and 300 bp. The high-throughput nature of this technology is ideal for quantifying the relative abundance of transcripts or identifying rare transcripts. Several platforms available on the market offer flexible outputs using roughly similar chemistry. Each cDNA fragment can be sequenced from only one end, called single-end (SE) sequencing, or both ends, called paired-end (PE) sequencing. The former is generally less expensive and faster than the latter. However, paired-end sequencing helps detect genomic rearrangements and repetitive sequence alignments better than the single- end configuration, since more information is collected from each fragment. - Long-read sequencing can resolve inaccessible regions of the genome and read through the entire length of RNA transcripts, allowing precise determination of specific isoforms. Two of the leading long-read sequencing platform providers include Pacific Biosciences (PacBio), and Oxford Nanopore Technologies\u00ae. However, if cost reduction is paramount and/or high data output is required, short-read sequencing is a better choice.","title":"Sequencing"},{"location":"1_background/#data-analysis","text":"Evaluating your data quality and extracting biologically relevant information is the final and most rewarding step in an RNA-Seq experiment. It is important to discuss your project with an experienced bioinformatician to find the best analysis pipeline for your data. One pipeline does not fit all approaches. Exercises - Rank genes based on expression? - Identify differentially expressed genes after inducing a drug - Identify Novel transcripts - Identify bacterial and eukaryotic genes in a sample","title":"Data Analysis"},{"location":"1_background/#yeast-dataset","text":"This workshop uses the dataset from yeast RNA-seq experiment, Lee et al 2008 Wild-type versus RNA degradation mutants Subset of data (chromosome 1) Six samples (3 WT / 3 MT) Single end sequencing","title":"Yeast Dataset"},{"location":"1_background/#overview-of-illumina-sequencing","text":"Here is a video to illumina sequencing. \u00ab Back to homepage 1. Quality Assessment \u00bb","title":"Overview of Illumina Sequencing"},{"location":"2_qualityassessment/","text":"Quality control of the sequencing data. \u00b6 \u00ab Background 2. Cleaning Reads \u00bb Do not remove this line (it will not be displayed) Objectives \u00b6 Assess the quality of your data Use FastQC package to do quality check Use MultiQC to view our analysis results Several tools available to do quality assessemnt. For this workshop, we will use fastqc . First, it is always good to verify where we are: $ cd ~ $ pwd /home/ $USER # good I am ready to work Checking to make sure we have the Raw files for the workshop. $ ls RNA_seq ... Creating a directory where to store the QC data: $ cd RNA_seq $ ls Genome Raw rsmodules.sh yeast_counts_all_chr.txt $ mkdir QC Since we are working on the NeSI HPC, we need to search and load the package before we start using it. Search $ module spider fastqc and then load $ module purge $ module load FastQC/0.11.9 hint : there is a file named rsmodules.sh which is a shell script to load the required modules at once. Running source ~/RNA_seq/rsmodules.sh command will excute it. Now we can start the quality control: $ fastqc -o QC/ Raw/* You will see an automatically updating output message telling you the progress of the analysis. It will start like this: Started analysis of SRR014335-chr1.fastq Approx 5% complete for SRR014335-chr1.fastq Approx 10% complete for SRR014335-chr1.fastq Approx 15% complete for SRR014335-chr1.fastq Approx 20% complete for SRR014335-chr1.fastq Approx 25% complete for SRR014335-chr1.fastq Approx 30% complete for SRR014335-chr1.fastq Approx 35% complete for SRR014335-chr1.fastq The FastQC program has created several new files within our RNA_seq/QC/ directory. $ ls QC SRR014335-chr1_fastqc.html SRR014336-chr1_fastqc.zip SRR014339-chr1_fastqc.html SRR014340-chr1_fastqc.zip SRR014335-chr1_fastqc.zip SRR014337-chr1_fastqc.html SRR014339-chr1_fastqc.zip SRR014341-chr1_fastqc.html SRR014336-chr1_fastqc.html SRR014337-chr1_fastqc.zip SRR014340-chr1_fastqc.html SRR014341-chr1_fastqc.zip Viewing the FastQC results \u00b6 If we were working on our local computers, we\u2019d be able to look at each of these HTML files by opening them in a web browser. However, these files are currently sitting on our remote NeSI HPC, where our local computer can\u2019t see them. And, since we are only logging into NeSI via the command line - it doesn\u2019t have any web browser setup to display these files either. So the easiest way to look at these webpage summary reports will be to transfer them to our local computers (i.e. your laptop). To transfer a file from a remote server to our own machines, we will use scp. First we will make a new directory on our computer to store the HTML files we\u2019re transferring. Let\u2019s put it on our desktop for now. Open a new tab in your terminal program (you can use the pull down menu at the top of your screen or the Cmd+t keyboard shortcut) and type: $ mkdir -p ~/Desktop/fastqc_html $ scp -r $USERp @login.mahuika.nesi.org.nz:~/RNA_seq/QC/ ~/Desktop/fastqc_html Working with the FastQC text output \u00b6 Now that we\u2019ve looked at our HTML reports to get a feel for the data, let\u2019s look more closely at the other output files. Go back to the tab in your terminal program that is connected to NeSI and make sure you\u2019re in our results subdirectory. $ cd /home/fayfa80p/RNA_seq/QC $ ls SRR014335-chr1_fastqc.html SRR014336-chr1_fastqc.zip SRR014339-chr1_fastqc.html SRR014340-chr1_fastqc.zip SRR014335-chr1_fastqc.zip SRR014337-chr1_fastqc.html SRR014339-chr1_fastqc.zip SRR014341-chr1_fastqc.html SRR014336-chr1_fastqc.html SRR014337-chr1_fastqc.zip SRR014340-chr1_fastqc.html SRR014341-chr1_fastqc.zip Let's unzip the files to look at the FastQC text file outputs. $ for filename in *.zip > do > unzip $filename > done Inside each unzipped folder, there is a summary text which shows results of the statistical tests done by FastQC $ ls SRR014335-chr1_fastqc fastqc_data.txt fastqc.fo fastqc_report.html Icons/ Images/ summary.txt Use less to preview the summary.txt file $ less SRR014335-chr1_fastqc/summary.txt We can make a record of the results we obtained for all our samples by concatenating all of our summary.txt files into a single file using the cat command. We\u2019ll call this fastqc_summaries.txt. $ cat */summary.txt > ~/RNA_seq/QC/fastqc_summaries.txt Have a look at the fastqc_summaries.txt and search for any of the samples that have failed the QC statistical tests. MultiQC - multi-sample analysis \u00b6 The FastQC analysis is applied to each sample separately, and produces a report for each. The application MultiQC provides a way to combine multiple sets of results (i.e., from MANY different software packages) across multipel samples. To generate multqc results, run the following command in the directory with the output files you want to summarise (e.g., fastqc reports generated above): $ module load MultiQC/1.9-gimkl-2020a-Python-3.8.2 $ cd ~/RNA_seq/ $ mkdir MultiQC $ cd MultiQC $ cp ../QC/* ./ $ multiqc . $ ls -F multiqc_data/ multiqc_report.html The html report shows the MultiQC summary \u00ab Background 2. Cleaning Reads \u00bb Back to homepage","title":"Quality control of the sequencing data."},{"location":"2_qualityassessment/#quality-control-of-the-sequencing-data","text":"\u00ab Background 2. Cleaning Reads \u00bb Do not remove this line (it will not be displayed)","title":"Quality control of the sequencing data."},{"location":"2_qualityassessment/#objectives","text":"Assess the quality of your data Use FastQC package to do quality check Use MultiQC to view our analysis results Several tools available to do quality assessemnt. For this workshop, we will use fastqc . First, it is always good to verify where we are: $ cd ~ $ pwd /home/ $USER # good I am ready to work Checking to make sure we have the Raw files for the workshop. $ ls RNA_seq ... Creating a directory where to store the QC data: $ cd RNA_seq $ ls Genome Raw rsmodules.sh yeast_counts_all_chr.txt $ mkdir QC Since we are working on the NeSI HPC, we need to search and load the package before we start using it. Search $ module spider fastqc and then load $ module purge $ module load FastQC/0.11.9 hint : there is a file named rsmodules.sh which is a shell script to load the required modules at once. Running source ~/RNA_seq/rsmodules.sh command will excute it. Now we can start the quality control: $ fastqc -o QC/ Raw/* You will see an automatically updating output message telling you the progress of the analysis. It will start like this: Started analysis of SRR014335-chr1.fastq Approx 5% complete for SRR014335-chr1.fastq Approx 10% complete for SRR014335-chr1.fastq Approx 15% complete for SRR014335-chr1.fastq Approx 20% complete for SRR014335-chr1.fastq Approx 25% complete for SRR014335-chr1.fastq Approx 30% complete for SRR014335-chr1.fastq Approx 35% complete for SRR014335-chr1.fastq The FastQC program has created several new files within our RNA_seq/QC/ directory. $ ls QC SRR014335-chr1_fastqc.html SRR014336-chr1_fastqc.zip SRR014339-chr1_fastqc.html SRR014340-chr1_fastqc.zip SRR014335-chr1_fastqc.zip SRR014337-chr1_fastqc.html SRR014339-chr1_fastqc.zip SRR014341-chr1_fastqc.html SRR014336-chr1_fastqc.html SRR014337-chr1_fastqc.zip SRR014340-chr1_fastqc.html SRR014341-chr1_fastqc.zip","title":"Objectives"},{"location":"2_qualityassessment/#viewing-the-fastqc-results","text":"If we were working on our local computers, we\u2019d be able to look at each of these HTML files by opening them in a web browser. However, these files are currently sitting on our remote NeSI HPC, where our local computer can\u2019t see them. And, since we are only logging into NeSI via the command line - it doesn\u2019t have any web browser setup to display these files either. So the easiest way to look at these webpage summary reports will be to transfer them to our local computers (i.e. your laptop). To transfer a file from a remote server to our own machines, we will use scp. First we will make a new directory on our computer to store the HTML files we\u2019re transferring. Let\u2019s put it on our desktop for now. Open a new tab in your terminal program (you can use the pull down menu at the top of your screen or the Cmd+t keyboard shortcut) and type: $ mkdir -p ~/Desktop/fastqc_html $ scp -r $USERp @login.mahuika.nesi.org.nz:~/RNA_seq/QC/ ~/Desktop/fastqc_html","title":"Viewing the FastQC results"},{"location":"2_qualityassessment/#working-with-the-fastqc-text-output","text":"Now that we\u2019ve looked at our HTML reports to get a feel for the data, let\u2019s look more closely at the other output files. Go back to the tab in your terminal program that is connected to NeSI and make sure you\u2019re in our results subdirectory. $ cd /home/fayfa80p/RNA_seq/QC $ ls SRR014335-chr1_fastqc.html SRR014336-chr1_fastqc.zip SRR014339-chr1_fastqc.html SRR014340-chr1_fastqc.zip SRR014335-chr1_fastqc.zip SRR014337-chr1_fastqc.html SRR014339-chr1_fastqc.zip SRR014341-chr1_fastqc.html SRR014336-chr1_fastqc.html SRR014337-chr1_fastqc.zip SRR014340-chr1_fastqc.html SRR014341-chr1_fastqc.zip Let's unzip the files to look at the FastQC text file outputs. $ for filename in *.zip > do > unzip $filename > done Inside each unzipped folder, there is a summary text which shows results of the statistical tests done by FastQC $ ls SRR014335-chr1_fastqc fastqc_data.txt fastqc.fo fastqc_report.html Icons/ Images/ summary.txt Use less to preview the summary.txt file $ less SRR014335-chr1_fastqc/summary.txt We can make a record of the results we obtained for all our samples by concatenating all of our summary.txt files into a single file using the cat command. We\u2019ll call this fastqc_summaries.txt. $ cat */summary.txt > ~/RNA_seq/QC/fastqc_summaries.txt Have a look at the fastqc_summaries.txt and search for any of the samples that have failed the QC statistical tests.","title":"Working with the FastQC text output"},{"location":"2_qualityassessment/#multiqc-multi-sample-analysis","text":"The FastQC analysis is applied to each sample separately, and produces a report for each. The application MultiQC provides a way to combine multiple sets of results (i.e., from MANY different software packages) across multipel samples. To generate multqc results, run the following command in the directory with the output files you want to summarise (e.g., fastqc reports generated above): $ module load MultiQC/1.9-gimkl-2020a-Python-3.8.2 $ cd ~/RNA_seq/ $ mkdir MultiQC $ cd MultiQC $ cp ../QC/* ./ $ multiqc . $ ls -F multiqc_data/ multiqc_report.html The html report shows the MultiQC summary \u00ab Background 2. Cleaning Reads \u00bb Back to homepage","title":"MultiQC -  multi-sample analysis"},{"location":"3_trimmingfiltering/","text":"Cleaning Reads \u00b6 \u00ab 1. Quality Assessment 3. Mapping and Counting \u00bb Do not remove this line (it will not be displayed) In the previous section, we took a high-level look at the quality of each of our samples using FastQC. We visualized per-base quality graphs showing the distribution of read quality at each base across all reads in a sample and extracted information about which samples fail which quality checks. Some of our samples failed quite a few quality metrics used by FastQC. This doesn\u2019t mean, though, that our samples should be thrown out! It\u2019s very common to have some quality metrics fail, and this may or may not be a problem for your downstream application. Adapter removal \u00b6 \"Adapters\" are short DNA sequences that are added to each read as part of the sequencing process (we won't get into \"why\" here). These are removed as part of the data generation steps that occur during the sequencing run, but sometimes there is still a non-trivial amount of adapter sequence present in the FASTQ files. Since the sequence is not part of the target genome (i.e., the genome if the species from which teh samples were derived) then we need to remove it to prevent it affecting the downstream analysis. The FastQC application get detection adapter contamination in samples. We will use a program called CutAdapt to filter poor quality reads and trim poor quality bases from our samples. How to act on fastq after QC. \u00b6 We can do several trimming: on quality using Phred score. What will be the Phred score? on the sequences, if they contain adaptor sequences. To do so, we can use on tools: The cutadapt application is often used to remove adapter sequence from FASTQ files. - The following syntax will remove the adapter sequence AACCGGTT from the file SRR014335-chr1.fastq, create a new file called SRR014335-chr1_trimmed.fastq, and write a summary to the log file SRR014335-chr1.log: $ pwd /home/ $USER /RNA_seq $ mkdir Trimmed $ module load cutadapt/2.10-gimkl-2020a-Python-3.8.2 $ cutadapt -q 20 -a AACCGGTT -o Trimmed/SRR014335-chr1_cutadapt.fastq Raw/SRR014335-chr1.fastq > Trimmed/SRR014335-chr1.log Arguments : * -q ( --quality-cutoff ) parameter can be used to trim low-quality ends from reads. If you specify a single cutoff value, the 3\u2019 end of each read is trimmed. $ less Trimmed/SRR014335-chr1.log Now we should trim all samples. $ cd Raw $ ls SRR014335-chr1.fastq SRR014336-chr1.fastq SRR014337-chr1.fastq SRR014339-chr1.fastq SRR014340-chr1.fastq SRR014341-chr1.fastq $ for filename in *.fastq > do > base = $( basename ${ filename } .fastq ) > cutadapt -q 20 -a AACCGGTT -o ../Trimmed/ ${ base } .trimmed.fastq ${ filename } > ../Trimmed/ ${ base } .log > done MultiQC: cutadapt log files \u00b6 If the log files from cutadapt are added to the directory containing the FastQC output, this information will also be incorporated into the MultiQC report the next time it is run. $ cd ../MultiQC $ cp ../Trimmed/*log . $ multiqc . \u00ab 1. Quality Assessment 3. Mapping and Counting \u00bb Back to homepage","title":"Cleaning Reads"},{"location":"3_trimmingfiltering/#cleaning-reads","text":"\u00ab 1. Quality Assessment 3. Mapping and Counting \u00bb Do not remove this line (it will not be displayed) In the previous section, we took a high-level look at the quality of each of our samples using FastQC. We visualized per-base quality graphs showing the distribution of read quality at each base across all reads in a sample and extracted information about which samples fail which quality checks. Some of our samples failed quite a few quality metrics used by FastQC. This doesn\u2019t mean, though, that our samples should be thrown out! It\u2019s very common to have some quality metrics fail, and this may or may not be a problem for your downstream application.","title":"Cleaning Reads"},{"location":"3_trimmingfiltering/#adapter-removal","text":"\"Adapters\" are short DNA sequences that are added to each read as part of the sequencing process (we won't get into \"why\" here). These are removed as part of the data generation steps that occur during the sequencing run, but sometimes there is still a non-trivial amount of adapter sequence present in the FASTQ files. Since the sequence is not part of the target genome (i.e., the genome if the species from which teh samples were derived) then we need to remove it to prevent it affecting the downstream analysis. The FastQC application get detection adapter contamination in samples. We will use a program called CutAdapt to filter poor quality reads and trim poor quality bases from our samples.","title":"Adapter removal"},{"location":"3_trimmingfiltering/#how-to-act-on-fastq-after-qc","text":"We can do several trimming: on quality using Phred score. What will be the Phred score? on the sequences, if they contain adaptor sequences. To do so, we can use on tools: The cutadapt application is often used to remove adapter sequence from FASTQ files. - The following syntax will remove the adapter sequence AACCGGTT from the file SRR014335-chr1.fastq, create a new file called SRR014335-chr1_trimmed.fastq, and write a summary to the log file SRR014335-chr1.log: $ pwd /home/ $USER /RNA_seq $ mkdir Trimmed $ module load cutadapt/2.10-gimkl-2020a-Python-3.8.2 $ cutadapt -q 20 -a AACCGGTT -o Trimmed/SRR014335-chr1_cutadapt.fastq Raw/SRR014335-chr1.fastq > Trimmed/SRR014335-chr1.log Arguments : * -q ( --quality-cutoff ) parameter can be used to trim low-quality ends from reads. If you specify a single cutoff value, the 3\u2019 end of each read is trimmed. $ less Trimmed/SRR014335-chr1.log Now we should trim all samples. $ cd Raw $ ls SRR014335-chr1.fastq SRR014336-chr1.fastq SRR014337-chr1.fastq SRR014339-chr1.fastq SRR014340-chr1.fastq SRR014341-chr1.fastq $ for filename in *.fastq > do > base = $( basename ${ filename } .fastq ) > cutadapt -q 20 -a AACCGGTT -o ../Trimmed/ ${ base } .trimmed.fastq ${ filename } > ../Trimmed/ ${ base } .log > done","title":"How to act on fastq after QC."},{"location":"3_trimmingfiltering/#multiqc-cutadapt-log-files","text":"If the log files from cutadapt are added to the directory containing the FastQC output, this information will also be incorporated into the MultiQC report the next time it is run. $ cd ../MultiQC $ cp ../Trimmed/*log . $ multiqc . \u00ab 1. Quality Assessment 3. Mapping and Counting \u00bb Back to homepage","title":"MultiQC: cutadapt log files"},{"location":"4_mappingANDcount/","text":"Mapping and Counting \u00b6 \u00ab 2. Cleaning Reads 4. DE Analysis \u00bb Do not remove this line (it will not be displayed) RNA-seq generate gene expression information by quantifying the number of transcripts (per gene) in a sample. This is acompished by counting the number of transcripts that have been sequenced - the more active a gene is, the more transcripts will be in a sample, and the more reads will be generated from that transcript. For RNA-seq, we need to align or map each read back to the genome, to see which gene produced it. - Highly expressed genes will generate lots of transcripts, so there will be lots of reads that map back to the position of that transcript in the genome. - The per-gene data we work with in an RNA-seq experiment are counts: the number of reads from each sample that originated from that gene. Preparation of the genome \u00b6 To be able to map (align) sequencing reads on the genome, the genome needs to be indexed first. In this workshop we will use HISAT2 . Note for speed reason, the reads will be aligned on the chr5 of the Yeast genome. $ cd /home/ $USER /RNA_seq/Genome #to list what is in your directory: $ ls /home/ $USER /RNA_seq/Genome Saccharomyces_cerevisiae.R64-1-1.99.gtf Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa $ module load HISAT2/2.2.0-gimkl-2020a # index file: $ hisat2-build -p 4 -f Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa Saccharomyces_cerevisiae.R64-1-1.dna.toplevel #list what is in the directory: $ ls /home/ $USER /RNA_seq/Genome Saccharomyces_cerevisiae.R64-1-1.99.gtf Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.4.ht2 Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.8.ht2 Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.1.ht2 Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.5.ht2 Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.2.ht2 Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.6.ht2 Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.3.ht2 Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.7.ht2 Arguments: * -p number of threads * -f fasta file How many files were created during the indexing process? Alignment on the genome \u00b6 Now that the genome is prepared. Sequencing reads can be aligned. Information required: Where the sequence information is stored (e.g. fastq files ...) ? What kind of sequencing: Single End or Paired end ? Where are stored the indexes and the genome? Where will the mapping files be stored? Now, lets move one folder up (into the RNA_seq folder): $ cd .. $ ls Genome QC Raw Trimmed Let's map one of our sample to the genome $ hisat2 -x Genome/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel -U Raw/SRR014335-chr1.fastq -S SRR014335.sam 125090 reads ; of these: 125090 ( 100 .00% ) were unpaired ; of these: 20537 ( 16 .42% ) aligned 0 times 85066 ( 68 .00% ) aligned exactly 1 time 19487 ( 15 .58% ) aligned >1 times 83 .58% overall alignment rate Arguments: * -x The basename of the index for the reference genome. * -U Comma-separated list of files containing unpaired reads to be aligned * -S File to write SAM alignments to. By default, alignments are written to the \u201cstandard out\u201d or \u201cstdout\u201d filehandle Now we need to align all the rest of the samples. $ pwd /home/ $USER /RNA_seq/ $ mkdir Mapping $ ls Genome Mapping QC Raw SRR014335.sam Trimmed let's use a for loop to process our samples: $ cd Trimmed $ ls SRR014335-chr1.fastq SRR014336-chr1.fastq SRR014337-chr1.fastq SRR014339-chr1.fastq SRR014340-chr1.fastq SRR014341-chr1.fastq $ for filename in * > do > base = $( basename ${ filename } .trimmed.fastq ) > hisat2 -p 4 -x ../Genome/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel -U $filename -S ../Mapping/ ${ base } .sam --summary-file ../Mapping/ ${ base } _summary.txt > done Now we can explore our SAM files. $ cd ../Mapping $ ls SRR014335-chr1.sam SRR014336-chr1_summary.txt SRR014339-chr1.sam SRR014340-chr1_summary.txt SRR014335-chr1_summary.txt SRR014337-chr1.sam SRR014339-chr1_summary.txt SRR014341-chr1.sam SRR014336-chr1.sam SRR014337-chr1_summary.txt SRR014340-chr1.sam SRR014341-chr1_summary.txt Converting SAM files to BAM files \u00b6 The SAM file, is a tab-delimited text file that contains information for each individual read and its alignment to the genome. While we do not have time to go into detail about the features of the SAM format, the paper by Heng Li et al. provides a lot more detail on the specification. The compressed binary version of SAM is called a BAM file. We use this version to reduce size and to allow for indexing, which enables efficient random access of the data contained within the file. A quick look into the sam file \u00b6 $ less SRR014335-chr1.sam The file begins with a header, which is optional. The header is used to describe the source of data, reference sequence, method of alignment, etc., this will change depending on the aligner being used. Following the header is the alignment section. Each line that follows corresponds to alignment information for a single read. Each alignment line has 11 mandatory fields for essential mapping information and a variable number of other fields for aligner specific information. An example entry from a SAM file is displayed below with the different fields highlighted. We will convert the SAM file to BAM format using the samtools program with the view command and tell this command that the input is in SAM format ( -S ) and to output BAM format ( -b ): $ module load SAMtools/1.10-GCC-9.2.0 $ for filename in *.sam > do > base = $( basename ${ filename } .sam ) > samtools view -S -b ${ filename } -o ${ base } .bam > done $ ls SRR014335-chr1.bam SRR014336-chr1.bam SRR014337-chr1.bam SRR014339-chr1.bam SRR014340-chr1.bam SRR014341-chr1.bam SRR014335-chr1.sam SRR014336-chr1.sam SRR014337-chr1.sam SRR014339-chr1.sam SRR014340-chr1.sam SRR014341-chr1.sam Next we sort the BAM file using the sort command from samtools. -o tells the command where to write the output. SAM/BAM files can be sorted in multiple ways, e.g. by location of alignment on the chromosome, by read name, etc. Default sort is coordinates. It is important to be aware that different alignment tools will output differently sorted SAM/BAM, and different downstream tools require differently sorted alignment files as input. $ for filename in *.bam > do > base = $( basename ${ filename } .bam ) > samtools sort -o ${ base } _sorted.bam ${ filename } > done SAM/BAM files can be sorted in multiple ways, e.g. by location of alignment on the chromosome, by read name, etc. It is important to be aware that different alignment tools will output differently sorted SAM/BAM, and different downstream tools require differently sorted alignment files as input. You can use samtools to learn more about the bam file as well. Some stats on your mapping: \u00b6 $ samtools flagstat SRR014335-chr1_sorted.bam 156984 + 0 in total ( QC-passed reads + QC-failed reads ) 31894 + 0 secondary 0 + 0 supplementary 0 + 0 duplicates 136447 + 0 mapped ( 86 .92% : N/A ) 0 + 0 paired in sequencing 0 + 0 read1 0 + 0 read2 0 + 0 properly paired ( N/A : N/A ) 0 + 0 with itself and mate mapped 0 + 0 singletons ( N/A : N/A ) 0 + 0 with mate mapped to a different chr 0 + 0 with mate mapped to a different chr ( mapQ> = 5 ) Basic statistics shown by flagstat will be slightly different from those in the summary file generated by HISAT2 due to different \"totals\" that are used for comparisons. flagstat compares the number of alignments; HISAT2 compares the number of reads mapped. This is because reads can be mapped/aligned to more than one reference location, and these reads have a \"primary\" and \"secondary\" alignment (see section 1.2 of the SAM specifications ). For example, the percent overall alignment in the HISAT2 summary will be equivalent to the percent primary mapped evaluated by flagstat . To get number of reads that aligned 0 times (summary file), the equivalent statistic from flagstat would be subtracting the number of mapped reads from the number of total alignments. MultiQC: HISAT2 output \u00b6 The HISAT2 output data can also be incorporated into the MultiQC report the next time it is run. ```bash $ cd ~/RNA_seq/MultiQC $ cp ../Mapping/ summary ./ $ multiqc . ``` Please note: running HISAT2 with either option --summary-file or older versions (< v2.1.0) gives log output identical to Bowtie2. These logs are indistinguishable and summary statistics will appear in MultiQC reports labelled as Bowtie2. Read Summarization \u00b6 Sequencing reads often need to be assigned to genomic features of interest after they are mapped to the reference genome. This process is often called read summarization or read quantification. Read summarization is required by a number of downstream analyses such as gene expression analysis and histone modification analysis. The output of read summarization is a count table, in which the number of reads assigned to each feature in each library is recorded. Counting \u00b6 We need to do some counting! Want to generate count data for each gene (actually each exon) - how many reads mapped to each exon in the genome, from each of our samples? Once we have that information, we can start thinking about how to determine which genes were differentially expressed in our study. Subread and FeatureCounts \u00b6 The featureCounts tool from the Subread package can be used to count how many reads aligned to each genome feature (exon). Need to specify the annotation informatyion (.gtf file) You can process all the samples at once: $ module load Subread $ pwd /home/ $USER /RNA_seq $ mkdir Counts $ cd Counts $ featureCounts -a ../Genome/Saccharomyces_cerevisiae.R64-1-1.99.gtf -o ./yeast_counts.txt -T 2 -t exon -g gene_id ../Mapping/*sorted.bam Arguments: * -a Name of an annotation file. GTF/GFF format by default * -o Name of output file including read counts * -T Specify the number of threads/CPUs used for mapping. 1 by default * -t Specify feature type in GTF annotation. 'exon' by default. Features used for read counting will be extracted from annotation using the provided value. * -g Specify attribute type in GTF annotation. 'gene_id' by default. Meta-features used for read counting will be extracted from annotation using the provided value. MultiQC: featureCounts output \u00b6 If the samples are processed individually, the output data can be incorporated into the MultiQC report the next time it is run. $ cd ../MultiQC $ cp ../Counts/* . $ multiqc . Since we now have all the count data in one file, we need to transfer it to our local computers so we could start working on RStudio to get differentially expressed genes. And the code to do it is below, however for this workshop, we are going to use a different file (yeast_counts_all_chr.txt) that you can download from section 4. Differential_Expression. This file has all the data for all the chromosomes. #In a new terminal that you can access you computer files, cd to the directory you want to save the counts file. $ scp fayfa80p@login.mahuika.nesi.org.nz:/home/fayfa80p/RNA_seq/Counts/yeast_counts_all_chr.txt ./ \u00ab 2. Cleaning Reads 4. DE Analysis \u00bb Back to homepage","title":"Mapping and Counting"},{"location":"4_mappingANDcount/#mapping-and-counting","text":"\u00ab 2. Cleaning Reads 4. DE Analysis \u00bb Do not remove this line (it will not be displayed) RNA-seq generate gene expression information by quantifying the number of transcripts (per gene) in a sample. This is acompished by counting the number of transcripts that have been sequenced - the more active a gene is, the more transcripts will be in a sample, and the more reads will be generated from that transcript. For RNA-seq, we need to align or map each read back to the genome, to see which gene produced it. - Highly expressed genes will generate lots of transcripts, so there will be lots of reads that map back to the position of that transcript in the genome. - The per-gene data we work with in an RNA-seq experiment are counts: the number of reads from each sample that originated from that gene.","title":"Mapping and Counting"},{"location":"4_mappingANDcount/#preparation-of-the-genome","text":"To be able to map (align) sequencing reads on the genome, the genome needs to be indexed first. In this workshop we will use HISAT2 . Note for speed reason, the reads will be aligned on the chr5 of the Yeast genome. $ cd /home/ $USER /RNA_seq/Genome #to list what is in your directory: $ ls /home/ $USER /RNA_seq/Genome Saccharomyces_cerevisiae.R64-1-1.99.gtf Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa $ module load HISAT2/2.2.0-gimkl-2020a # index file: $ hisat2-build -p 4 -f Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa Saccharomyces_cerevisiae.R64-1-1.dna.toplevel #list what is in the directory: $ ls /home/ $USER /RNA_seq/Genome Saccharomyces_cerevisiae.R64-1-1.99.gtf Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.4.ht2 Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.8.ht2 Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.1.ht2 Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.5.ht2 Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.2.ht2 Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.6.ht2 Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.3.ht2 Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.7.ht2 Arguments: * -p number of threads * -f fasta file How many files were created during the indexing process?","title":"Preparation of the genome"},{"location":"4_mappingANDcount/#alignment-on-the-genome","text":"Now that the genome is prepared. Sequencing reads can be aligned. Information required: Where the sequence information is stored (e.g. fastq files ...) ? What kind of sequencing: Single End or Paired end ? Where are stored the indexes and the genome? Where will the mapping files be stored? Now, lets move one folder up (into the RNA_seq folder): $ cd .. $ ls Genome QC Raw Trimmed Let's map one of our sample to the genome $ hisat2 -x Genome/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel -U Raw/SRR014335-chr1.fastq -S SRR014335.sam 125090 reads ; of these: 125090 ( 100 .00% ) were unpaired ; of these: 20537 ( 16 .42% ) aligned 0 times 85066 ( 68 .00% ) aligned exactly 1 time 19487 ( 15 .58% ) aligned >1 times 83 .58% overall alignment rate Arguments: * -x The basename of the index for the reference genome. * -U Comma-separated list of files containing unpaired reads to be aligned * -S File to write SAM alignments to. By default, alignments are written to the \u201cstandard out\u201d or \u201cstdout\u201d filehandle Now we need to align all the rest of the samples. $ pwd /home/ $USER /RNA_seq/ $ mkdir Mapping $ ls Genome Mapping QC Raw SRR014335.sam Trimmed let's use a for loop to process our samples: $ cd Trimmed $ ls SRR014335-chr1.fastq SRR014336-chr1.fastq SRR014337-chr1.fastq SRR014339-chr1.fastq SRR014340-chr1.fastq SRR014341-chr1.fastq $ for filename in * > do > base = $( basename ${ filename } .trimmed.fastq ) > hisat2 -p 4 -x ../Genome/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel -U $filename -S ../Mapping/ ${ base } .sam --summary-file ../Mapping/ ${ base } _summary.txt > done Now we can explore our SAM files. $ cd ../Mapping $ ls SRR014335-chr1.sam SRR014336-chr1_summary.txt SRR014339-chr1.sam SRR014340-chr1_summary.txt SRR014335-chr1_summary.txt SRR014337-chr1.sam SRR014339-chr1_summary.txt SRR014341-chr1.sam SRR014336-chr1.sam SRR014337-chr1_summary.txt SRR014340-chr1.sam SRR014341-chr1_summary.txt","title":"Alignment on the genome"},{"location":"4_mappingANDcount/#converting-sam-files-to-bam-files","text":"The SAM file, is a tab-delimited text file that contains information for each individual read and its alignment to the genome. While we do not have time to go into detail about the features of the SAM format, the paper by Heng Li et al. provides a lot more detail on the specification. The compressed binary version of SAM is called a BAM file. We use this version to reduce size and to allow for indexing, which enables efficient random access of the data contained within the file.","title":"Converting SAM files to BAM files"},{"location":"4_mappingANDcount/#a-quick-look-into-the-sam-file","text":"$ less SRR014335-chr1.sam The file begins with a header, which is optional. The header is used to describe the source of data, reference sequence, method of alignment, etc., this will change depending on the aligner being used. Following the header is the alignment section. Each line that follows corresponds to alignment information for a single read. Each alignment line has 11 mandatory fields for essential mapping information and a variable number of other fields for aligner specific information. An example entry from a SAM file is displayed below with the different fields highlighted. We will convert the SAM file to BAM format using the samtools program with the view command and tell this command that the input is in SAM format ( -S ) and to output BAM format ( -b ): $ module load SAMtools/1.10-GCC-9.2.0 $ for filename in *.sam > do > base = $( basename ${ filename } .sam ) > samtools view -S -b ${ filename } -o ${ base } .bam > done $ ls SRR014335-chr1.bam SRR014336-chr1.bam SRR014337-chr1.bam SRR014339-chr1.bam SRR014340-chr1.bam SRR014341-chr1.bam SRR014335-chr1.sam SRR014336-chr1.sam SRR014337-chr1.sam SRR014339-chr1.sam SRR014340-chr1.sam SRR014341-chr1.sam Next we sort the BAM file using the sort command from samtools. -o tells the command where to write the output. SAM/BAM files can be sorted in multiple ways, e.g. by location of alignment on the chromosome, by read name, etc. Default sort is coordinates. It is important to be aware that different alignment tools will output differently sorted SAM/BAM, and different downstream tools require differently sorted alignment files as input. $ for filename in *.bam > do > base = $( basename ${ filename } .bam ) > samtools sort -o ${ base } _sorted.bam ${ filename } > done SAM/BAM files can be sorted in multiple ways, e.g. by location of alignment on the chromosome, by read name, etc. It is important to be aware that different alignment tools will output differently sorted SAM/BAM, and different downstream tools require differently sorted alignment files as input. You can use samtools to learn more about the bam file as well.","title":"A quick look into the sam file"},{"location":"4_mappingANDcount/#some-stats-on-your-mapping","text":"$ samtools flagstat SRR014335-chr1_sorted.bam 156984 + 0 in total ( QC-passed reads + QC-failed reads ) 31894 + 0 secondary 0 + 0 supplementary 0 + 0 duplicates 136447 + 0 mapped ( 86 .92% : N/A ) 0 + 0 paired in sequencing 0 + 0 read1 0 + 0 read2 0 + 0 properly paired ( N/A : N/A ) 0 + 0 with itself and mate mapped 0 + 0 singletons ( N/A : N/A ) 0 + 0 with mate mapped to a different chr 0 + 0 with mate mapped to a different chr ( mapQ> = 5 ) Basic statistics shown by flagstat will be slightly different from those in the summary file generated by HISAT2 due to different \"totals\" that are used for comparisons. flagstat compares the number of alignments; HISAT2 compares the number of reads mapped. This is because reads can be mapped/aligned to more than one reference location, and these reads have a \"primary\" and \"secondary\" alignment (see section 1.2 of the SAM specifications ). For example, the percent overall alignment in the HISAT2 summary will be equivalent to the percent primary mapped evaluated by flagstat . To get number of reads that aligned 0 times (summary file), the equivalent statistic from flagstat would be subtracting the number of mapped reads from the number of total alignments.","title":"Some stats on your mapping:"},{"location":"4_mappingANDcount/#multiqc-hisat2-output","text":"The HISAT2 output data can also be incorporated into the MultiQC report the next time it is run. ```bash $ cd ~/RNA_seq/MultiQC $ cp ../Mapping/ summary ./ $ multiqc . ``` Please note: running HISAT2 with either option --summary-file or older versions (< v2.1.0) gives log output identical to Bowtie2. These logs are indistinguishable and summary statistics will appear in MultiQC reports labelled as Bowtie2.","title":"MultiQC: HISAT2 output"},{"location":"4_mappingANDcount/#read-summarization","text":"Sequencing reads often need to be assigned to genomic features of interest after they are mapped to the reference genome. This process is often called read summarization or read quantification. Read summarization is required by a number of downstream analyses such as gene expression analysis and histone modification analysis. The output of read summarization is a count table, in which the number of reads assigned to each feature in each library is recorded.","title":"Read Summarization"},{"location":"4_mappingANDcount/#counting","text":"We need to do some counting! Want to generate count data for each gene (actually each exon) - how many reads mapped to each exon in the genome, from each of our samples? Once we have that information, we can start thinking about how to determine which genes were differentially expressed in our study.","title":"Counting"},{"location":"4_mappingANDcount/#subread-and-featurecounts","text":"The featureCounts tool from the Subread package can be used to count how many reads aligned to each genome feature (exon). Need to specify the annotation informatyion (.gtf file) You can process all the samples at once: $ module load Subread $ pwd /home/ $USER /RNA_seq $ mkdir Counts $ cd Counts $ featureCounts -a ../Genome/Saccharomyces_cerevisiae.R64-1-1.99.gtf -o ./yeast_counts.txt -T 2 -t exon -g gene_id ../Mapping/*sorted.bam Arguments: * -a Name of an annotation file. GTF/GFF format by default * -o Name of output file including read counts * -T Specify the number of threads/CPUs used for mapping. 1 by default * -t Specify feature type in GTF annotation. 'exon' by default. Features used for read counting will be extracted from annotation using the provided value. * -g Specify attribute type in GTF annotation. 'gene_id' by default. Meta-features used for read counting will be extracted from annotation using the provided value.","title":"Subread and FeatureCounts"},{"location":"4_mappingANDcount/#multiqc-featurecounts-output","text":"If the samples are processed individually, the output data can be incorporated into the MultiQC report the next time it is run. $ cd ../MultiQC $ cp ../Counts/* . $ multiqc . Since we now have all the count data in one file, we need to transfer it to our local computers so we could start working on RStudio to get differentially expressed genes. And the code to do it is below, however for this workshop, we are going to use a different file (yeast_counts_all_chr.txt) that you can download from section 4. Differential_Expression. This file has all the data for all the chromosomes. #In a new terminal that you can access you computer files, cd to the directory you want to save the counts file. $ scp fayfa80p@login.mahuika.nesi.org.nz:/home/fayfa80p/RNA_seq/Counts/yeast_counts_all_chr.txt ./ \u00ab 2. Cleaning Reads 4. DE Analysis \u00bb Back to homepage","title":"MultiQC: featureCounts output"},{"location":"5.overexpressionanalysis/","text":"RNA-seq: pathway analysis \u00b6 In this session we will be using R to perform a pathway analysis based on over-representation analysis. We'll use a combination of R markdown output and slides: R markdown: rnaseq-pathway.md Slides: lecture_annotation_pathways.pdf","title":"RNA-seq: pathway analysis"},{"location":"5.overexpressionanalysis/#rna-seq-pathway-analysis","text":"In this session we will be using R to perform a pathway analysis based on over-representation analysis. We'll use a combination of R markdown output and slides: R markdown: rnaseq-pathway.md Slides: lecture_annotation_pathways.pdf","title":"RNA-seq: pathway analysis"},{"location":"5_differentialexpression/","text":"RNA-seq: differential expression analysis \u00b6 In this session we will be using R to identify differentially expressed genes in the yeast data set. We'll use a combination of R markdown output and slides: R markdown: rnaseq-diffexp.md Slides: lecture_differential_expression.pdf","title":"RNA-seq: differential expression analysis"},{"location":"5_differentialexpression/#rna-seq-differential-expression-analysis","text":"In this session we will be using R to identify differentially expressed genes in the yeast data set. We'll use a combination of R markdown output and slides: R markdown: rnaseq-diffexp.md Slides: lecture_differential_expression.pdf","title":"RNA-seq: differential expression analysis"}]}